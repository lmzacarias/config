configurar mongo en linux 
cd /var/lib/mongodb/
cd /etc/apt/sources.list.d/
ls
sudo apt-get update
ls -la
sudo apt-get autoremove
ls -la
rm mongodb-org-4.2.list
sudo rm mongo-org-4.2.list
sudo apt-get update

install mongo 

referenciado de la documentacion de mongo
----------------------------------------
wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
sudo apt-get install gnupg
wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
sudo apt-get update
sudo apt-get install -y mongodb-org


corregir error al correr mongo 
----------------------------------

cd /tmp/
ls -la
cd /var/lib/
ls -la
cd mongodb/
ls -la
nano /etc/mongod.config
 cat /var/log/mongodb/mongod.log
cd /tmp/
ls -la
chown mongodb:mongodb mongodb-27017.sock    // cambia los permisos de root a mongo 

sudo chown mongodb:mongodb mongodb-27017.sock 
sudo service mongodb stop
sudo systemctl unmask mongod
sudo service mongodb start

arreglar el error de coneccon de mongo 
---------------------------------------------------
sudo rm /var/lib/mongodb/mongod.lock
sudo mongod --dbpath /var/lib/mongodb/ --repair
sudo mongod --dbpath /var/lib/mongodb/ --journal

correr el proyecto
sh startApp.sh

--------------------------------------------------------
correr el test de migraciones 

nodemon run_test.js /migrations/deltas/0356_edit_year_structure_academica_soluciones_integrales_2021_2022/deltatest.js 
-----------------------------------------------------------



instalar html to pdf 
wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.focal_amd64.deb
sudo apt install ./wkhtmltox_0.12.6-1.focal_amd64.deb


refactor

`` js
'use strict';

fdescribe('activities_by_activity_type routes', () => {
  //var mocks = __require('mocks/mocks')();
  var abstract_routes = __require('crud_module/routes_with_school_year');
  //var request_mock = __require('mocks/request_mock');
  const activities_by_activity_type_routes = require('../activities_by_activity_type_routes.js');
  const instance_routes = __require('utils/testing_routes');
  var database = __require('utils/testing_database');
  const routes = instance_routes(activities_by_activity_type_routes, abstract_routes);

  beforeEach((done) => {
    database.clearAndLoad([], [
      __dirname + '/fixtures/student_courses.js'
    ], done);
  });

  it('should set activities_by_activity_type as get path', () => {
    expect(routes.path).toBe('/activities_by_activity_type');
  });
  
  it('should get activities by student and activity type score in response', async () => {
    const request = {
      params:{
        year: '51fbcf3104501a6405000000',
        school: '51fbcf3104501a6403000001'
      },
      query:{
             course: '528a747110b24b294900000a',
      activity_type: '51fbcf3104501a6404000018',
      student: '5245f3aa4cd6c418b6000009',
      part: '51fbcf3104501a6404000021'
      }
    }

    const data = await routes.get('/activities_by_activity_type', request);
    const activities = data.response;

      expect(activities[0].name).toBe('Maqueta Solar');
      expect(activities[0].description).toBe('Es una actividad para maqueta solar');
      expect(activities[0].scores.score).toBe(9.5);
      expect(activities[0].scores.score_letter).toBe('A');
      expect(activities[0].scores.notes).toBe('Utilizo materiales reciclados');
      expect(activities[0].date).toBe(1383091200);
    // prepare_request_mock();

    // spyOn(mocks.response, 'json').and.callFake((response) => {
    //   if (response.errors.length) {
    //     throw response.errors; 
    //   }

    //   var activities = response.response;
    //   expect(activities.length).toBe(1);
      
    //   expect(activities[0].name).toBe('Maqueta Solar');
    //   expect(activities[0].description).toBe('Es una actividad para maqueta solar');
    //   expect(activities[0].scores.score).toBe(9.5);
    //   expect(activities[0].scores.score_letter).toBe('A');
    //   expect(activities[0].scores.notes).toBe('Utilizo materiales reciclados');
    //   expect(activities[0].date).toBe(1383091200);
      
    //   done();
    // });
  });

  it('should get activities and student score by part in response', async () => {
    const request = {
      params:{
        year: '51fbcf3104501a6405000000',
        school: '51fbcf3104501a6403000001'
      },
      query:{
        course: '528ba466a93d1b1118000030',
        activity_type: '528ba351a93d1b111800001d',
        student: '5245f3aa4cd6c418b6000008',
        part: '528ba351a93d1b1118000024'
      }
    }

    const data = await routes.get('/activities_by_activity_type', request);
    const activities = data.response;
      expect(activities.length).toBe(2);

      expect(activities[0].name).toBe('1A');
      expect(activities[0].scores.score).toBe(6);

      expect(activities[1].name).toBe('2A');
      expect(activities[1].scores.score).toBe(7);
    // prepare_request_mock_by_part();

    // spyOn(mocks.response, 'json').and.callFake((response) => {
    //   var activities = response.response;
    //   expect(activities.length).toBe(2);

    //   expect(activities[0].name).toBe('1A');
    //   expect(activities[0].scores.score).toBe(6);

    //   expect(activities[1].name).toBe('2A');
    //   expect(activities[1].scores.score).toBe(7);
      
    //   done();
    // });
  });

  it('should don\'t activities if student not has activities', async() => {
    const request = {
      params:{
        year: '51fbcf3104501a6405000000',
        school: '51fbcf3104501a6403000001'
      },
      query:{
        course: '528ba466a93d1b1118000030',
        activity_type: '528ba351a93d1b111800041d',
        student: '5245f3aa4cd6c418b6000008',
        part: '528ba351a93d1b1118000024'
      }
    }

    const data = await routes.get('/activities_by_activity_type', request);
    const activities = data.response;
    expect(activities.length).toBe(0);
    // prepare_request_mock_by_part('528ba351a93d1b111800041d');

    // spyOn(mocks.response, 'json').and.callFake((response) => {
    //   var activities = response.response;
    //   expect(activities.length).toBe(0);
      
    //   done();
    // });
  });

  // -----------------------------------------

  // function prepare_request_mock() {
  //   var request = request_mock
  //   .new()
  //   .year('51fbcf3104501a6405000000')
  //   .school('51fbcf3104501a6403000001')
  //   .permissions([ 'student_year_summary_can_find' ])
  //   .get();
    
  //   request.query = {
  //     course: '528a747110b24b294900000a',
  //     activity_type: '51fbcf3104501a6404000018',
  //     student: '5245f3aa4cd6c418b6000009',
  //     part: '51fbcf3104501a6404000021'
  //   };
    
  //   get_route(request, mocks.response);
  // }
  
//   function prepare_request_mock_by_part(activity_type) {
//     var request = request_mock
//     .new()
//     .year('51fbcf3104501a6405000000')
//     .school('51fbcf3104501a6403000001')
//     .permissions([ 'students_basic_reports_can_find' ])
//     .get();
    
//     activity_type = activity_type || '528ba351a93d1b111800001d';
    
//     request.query = {
//       course: '528ba466a93d1b1118000030',
//       activity_type: activity_type,
//       student: '5245f3aa4cd6c418b6000008',
//       part: '528ba351a93d1b1118000024'
//     };
    
//     get_route(request, mocks.response);
//   }
});


``



